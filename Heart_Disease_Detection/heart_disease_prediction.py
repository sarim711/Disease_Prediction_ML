# -*- coding: utf-8 -*-
"""Heart Disease Prediction Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wRzPZByL_FBIEDAqsxU5wR3U7vxG2CsZ

Importing the Dependencies
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data Collection and Processing"""

#loadind csv data to panda dataframe
heart_disease = pd.read_csv('/content/heart_disease_data.csv')

#data of first five rows of dataset
heart_disease.head()

#number of rows and columns
heart_disease.shape

#getting info about data
heart_disease.info()

#checking for missing values
heart_disease.isnull().sum()

"""Statistical measures of data

"""

heart_disease.describe()

#checking distribution of target variavble
heart_disease['target'].value_counts()

"""1= Heart Disease
0= Health Heart

Splitting the features and targets
"""

X = heart_disease.drop(columns = 'target', axis=1)
Y = heart_disease['target']
print(X)

print(Y)

"""Splitting the data into Training data and Test Data"""

X_train, X_test, Y_train, Y_test= train_test_split(X,Y, test_size=0.2, stratify=Y, random_state=2)
print(X.shape, X_train.shape, X_test.shape)

"""Model Training and Logical Regression"""

model = LogisticRegression()
#training logistic regression model with training data
model.fit(X_train, Y_train)

"""Model Evaluation

Accuracy Score
"""

#accuracy on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)
print('Accuracy on training data is', training_data_accuracy)

#accuracy score on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)
print(test_data_accuracy)

"""Building predictive system"""

input_data = (56,1,1,120,236,0,1,178,0,0.8,2,0,2)
#change this tuple data into numpy array
input_data_as_numpy_array = np.asarray(input_data)
#reshaping the numpy array to predict 1 data point
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)
print(prediction)

if  (prediction[0] ==0):
  print('The person does not have heart disease')
else :
  print('The person has heart disease')
