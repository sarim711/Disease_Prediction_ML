# -*- coding: utf-8 -*-
"""Parkinson_Disease_Detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iJkCT0NHPLTv_XqRWqks9HAkdSGgJGfV

Importing Dependencies
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Data Collection and Analysis"""

#loading data from csv file to pandas dataframe
parkinsons_data = pd.read_csv('/content/parkinsons.csv')

#printing first five rows
parkinsons_data.head()

#no. of rows and columns in dataframe
parkinsons_data.shape

#further info on dataset
parkinsons_data.info()

#checking for missing values
parkinsons_data.isnull().sum()

#statistical measures about data
parkinsons_data.describe()

#distribution of target variable
#1 = parkinson positive & 0 = healthy
parkinsons_data['status'].value_counts()

#grouping data based on target variable
parkinsons_data.groupby('status').mean()

"""Data Pre-Processing"""

#seperating features and target
X = parkinsons_data.drop(columns =['name','status'], axis = 1)
Y = parkinsons_data['status']
print(X,Y)

"""Splitting data into training & test data"""

X_train, X_test, Y_train,Y_test = train_test_split(X,Y, test_size=0.2, stratify=Y, random_state=2)
print(X.shape , X_train.shape , X_test.shape)

"""Data Standardization"""

scaler = StandardScaler()
scaler.fit(X_train)
X_train = scaler.transform(X_train)

X_test = scaler.transform(X_test)
print(X_train)

"""Model training using svm"""

model = svm.SVC(kernel = 'linear')
model.fit(X_train,Y_train)

"""Model Evaluation"""

#accuracy score on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(Y_train , X_train_prediction)
print(training_data_accuracy)

#accuracy score on test data
X_test_prediction= model.predict(X_test)
test_data_accuracy = accuracy_score(Y_test ,X_test_prediction)
print(test_data_accuracy)

"""Building Predictive System"""

input_data = (116.68200,131.11100,111.55500,0.01050,0.00009,0.00544,0.00781,0.01633,0.05233,0.48200,0.02757,0.03858,0.03590,0.08270,0.01309,20.65100,0.429895,0.825288,-4.443179,0.311173,2.342259,0.332634)

#changing input data to numpy array
input_data_as_numpy_array=np.asarray(input_data)

#reshaping the array
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

#standardizing data
std_data = scaler.transform(input_data_reshaped)

prediction = model.predict(std_data)
print(prediction)

if  (prediction[0] ==0):
  print('The person does not have parkinsons disease')
else :
  print('The person has parkinsons disease')
